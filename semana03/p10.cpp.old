#include <iostream>
#include <vector>
#include <string>

using namespace std;

typedef pair< int, int > pi;
typedef pair< int, pi > ppi;

list< ppi > edges; // Edges of the graph
vector< ppi > mst;   // Edges of the MST
int n, m;            // Number of vertices and edges
string buff = "";

void inputRead()
{
	string top;

	if (buff.length() == 0){
		cin >> top;
		if (cin.fail())
			return 0;
	}
	else
		top = buff;

	n = ((int) top.front())-64;
	//edges.reserve( m );
	mst.reserve( n - 1 );


	do
	{
		int from, to, weight;

		cin >> from >> to >> weight;

		// C++11 : edges.push_back( {weight, {from, to}} );
		edges.push_back( make_pair( weight, make_pair( from, to ) ) );
	}while(top );
}

void kruskal()
{
	// Sort edges in increasing order by weight
	sort(edges.begin(), edges.end());

	// Create a disjoint set to each vertex
	disjointSets ds( n );

	int c = 1;

	list< ppi >::iterator it; 
	// Iterate through all sorted edges
	for (it = edges.begin(); c < n; it++)
	{
		int u = it->second.first;
		int v = it->second.second;

		int set_u = ds.find( u );
		int set_v = ds.find( v );

		if (set_u != set_v)
		{
			// Current edge belongs to the MST
			mst.push_back( make_pair( it->first, make_pair( u, v ) ) );

			ds.merge( set_u, set_v );  // Union of sets of u and v
			c++;
		}
	}
} // end of kruskal()